updated Translator

const americanOnly = require('./american-only.js');
const americanToBritishSpelling = require('./american-to-british-spelling.js');
const americanToBritishTitles = require("./american-to-british-titles.js")
const britishOnly = require('./british-only.js')

class Translator {
  translate(text, locale) {
    // Check if valid locale is provided
    if (locale !== 'american-to-british' && locale !== 'british-to-american') {
      return { error: 'Invalid value for locale field' };
    }
    
    // Return early if text is empty
    if (text === '') {
      return { error: 'No text to translate' };
    }
    
    let translation = text;
    let translatedPhrases = [];
    
    if (locale === 'american-to-british') {
      translation = this.translateAmericanToBritish(text, translatedPhrases);
    } else {
      translation = this.translateBritishToAmerican(text, translatedPhrases);
    }
    
    // If no translation was made, return the original text
    if (translatedPhrases.length === 0) {
      return {
        text,
        translation: "Everything looks good to me!"
      };
    }
    
    return {
      text,
      translation: translation
    };
  }
  
  translateAmericanToBritish(text, translatedPhrases) {
    let translatedText = text;
    
    // 1. Handle titles first (Mr. -> Mr)
    // Direct approach for American titles that are causing issues
    const titleRegex = /\b(Mr\.|Dr\.)\s/gi;
    let titleMatch;
    
    while ((titleMatch = titleRegex.exec(text)) !== null) {
      const fullMatch = titleMatch[0];
      const titlePart = titleMatch[1];
      const britishTitle = titlePart.slice(0, -1); // Remove the period
      
      // Replace in the translatedText
      translatedText = translatedText.replace(
        fullMatch, 
        `<span class="highlight">${britishTitle}</span> `
      );
      
      translatedPhrases.push({ original: titlePart, translated: britishTitle });
    }
    
    // Now handle all titles from the dictionary
    for (const [american, british] of Object.entries(americanToBritishTitles)) {
      // Add word boundary and look for the title followed by space
      const regex = new RegExp(`\\b${this.escapeRegExp(american)}\\s`, 'gi');
      let match;
      
      while ((match = regex.exec(text)) !== null) {
        // Skip if we already handled this with the direct approach
        if (match[0].match(/^(Mr\.|Dr\.)\s/i)) continue;
        
        const matchedText = match[0].trim();
        const replacement = british;
        
        // Replace only if not already replaced
        if (translatedText.includes(matchedText)) {
          translatedText = translatedText.replace(
            matchedText, 
            `<span class="highlight">${replacement}</span>`
          );
          translatedPhrases.push({ original: matchedText, translated: replacement });
        }
      }
    }
    
    // 2. Handle American specific words
    for (const [american, british] of Object.entries(americanOnly)) {
      const regex = new RegExp(`\\b${this.escapeRegExp(american)}\\b`, 'i');
      const match = text.match(regex);
      
      if (match) {
        const matchedText = match[0];
        const replacement = british;
        translatedText = translatedText.replace(regex, `<span class="highlight">${replacement}</span>`);
        translatedPhrases.push({ original: matchedText, translated: replacement });
      }
    }
    
    // 3. Handle American to British spelling
    for (const [american, british] of Object.entries(americanToBritishSpelling)) {
      const regex = new RegExp(`\\b${this.escapeRegExp(american)}\\b`, 'i');
      const match = text.match(regex);
      
      if (match) {
        const matchedText = match[0];
        const replacement = british;
        translatedText = translatedText.replace(regex, `<span class="highlight">${replacement}</span>`);
        translatedPhrases.push({ original: matchedText, translated: replacement });
      }
    }
    
    // 4. Handle time format (12:15 -> 12.15)
    const timeRegex = /(\d{1,2}):(\d{2})/g;
    let timeMatch;
    
    while ((timeMatch = timeRegex.exec(text)) !== null) {
      const originalTime = timeMatch[0];
      const britishTime = `${timeMatch[1]}.${timeMatch[2]}`;
      translatedText = translatedText.replace(originalTime, `<span class="highlight">${britishTime}</span>`);
      translatedPhrases.push({ original: originalTime, translated: britishTime });
    }
    
    return translatedText;
  }
  
  translateBritishToAmerican(text, translatedPhrases) {
    let translatedText = text;
    
    // 1. Handle British titles (Mr -> Mr.)
    for (const [american, british] of Object.entries(americanToBritishTitles)) {
      // Create regex that searches for the British title followed by a space
      const regex = new RegExp(`\\b${this.escapeRegExp(british)}\\s`, 'gi');
      let match;
      
      while ((match = regex.exec(text)) !== null) {
        const matchedText = match[0].trim();
        const replacement = american;
        
        // Replace in the translatedText
        translatedText = translatedText.replace(
          new RegExp(`\\b${this.escapeRegExp(matchedText)}\\b`, 'g'),
          `<span class="highlight">${replacement}</span>`
        );
        
        translatedPhrases.push({ original: matchedText, translated: replacement });
      }
    }
    
    // 2. Handle British specific words
    for (const [british, american] of Object.entries(britishOnly)) {
      const regex = new RegExp(`\\b${this.escapeRegExp(british)}\\b`, 'i');
      const match = text.match(regex);
      
      if (match) {
        const matchedText = match[0];
        const replacement = american;
        translatedText = translatedText.replace(regex, `<span class="highlight">${replacement}</span>`);
        translatedPhrases.push({ original: matchedText, translated: replacement });
      }
    }
    
    // 3. Handle British to American spelling (reverse of americanToBritishSpelling)
    for (const [american, british] of Object.entries(americanToBritishSpelling)) {
      const regex = new RegExp(`\\b${this.escapeRegExp(british)}\\b`, 'i');
      const match = text.match(regex);
      
      if (match) {
        const matchedText = match[0];
        const replacement = american;
        translatedText = translatedText.replace(regex, `<span class="highlight">${replacement}</span>`);
        translatedPhrases.push({ original: matchedText, translated: replacement });
      }
    }
    
    // 4. Handle time format (12.15 -> 12:15)
    const timeRegex = /(\d{1,2})\.(\d{2})/g;
    let timeMatch;
    
    while ((timeMatch = timeRegex.exec(text)) !== null) {
      const originalTime = timeMatch[0];
      const americanTime = `${timeMatch[1]}:${timeMatch[2]}`;
      translatedText = translatedText.replace(originalTime, `<span class="highlight">${americanTime}</span>`);
      translatedPhrases.push({ original: originalTime, translated: americanTime });
    }
    
    return translatedText;
  }
  
  // Helper method to escape special characters for RegExp
  escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  }
}

module.exports = Translator;