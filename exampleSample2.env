new approach 

const americanOnly = require('./american-only.js');
const americanToBritishSpelling = require('./american-to-british-spelling.js');
const americanToBritishTitles = require("./american-to-british-titles.js")
const britishOnly = require('./british-only.js')

class Translator {
  translate(text, locale) {
    // Check if valid locale is provided
    if (locale !== 'american-to-british' && locale !== 'british-to-american') {
      return { error: 'Invalid value for locale field' };
    }
    
    // Return early if text is empty
    if (text === '') {
      return { error: 'No text to translate' };
    }
    
    let translatedText = text;
    let translatedPhrases = [];
    
    if (locale === 'american-to-british') {
      // Handle titles (Mr. -> Mr, Dr. -> Dr)
      // This needs special attention based on the failing tests
      Object.entries(americanToBritishTitles).forEach(([american, british]) => {
        const titleRegex = new RegExp(`\\b${this.escapeRegExp(american)}\\b`, 'gi');
        let match;
        let positions = [];
        
        // Find all matches and store their positions
        while ((match = titleRegex.exec(text)) !== null) {
          positions.push(match.index);
        }
        
        // Process matches in reverse order to avoid position shifts
        for (let i = positions.length - 1; i >= 0; i--) {
          const index = positions[i];
          const americanTitle = text.substring(index, index + american.length);
          
          // Replace with highlight spans
          translatedText = translatedText.substring(0, index) + 
                           `<span class="highlight">${british}</span>` + 
                           translatedText.substring(index + american.length);
          
          translatedPhrases.push({ original: americanTitle, translated: british });
        }
      });
      
      // Handle American-only terms
      Object.entries(americanOnly).forEach(([american, british]) => {
        const regex = new RegExp(`\\b${this.escapeRegExp(american)}\\b`, 'i');
        if (text.match(regex)) {
          const matchedText = text.match(regex)[0];
          translatedText = translatedText.replace(regex, `<span class="highlight">${british}</span>`);
          translatedPhrases.push({ original: matchedText, translated: british });
        }
      });
      
      // Handle American to British spelling
      Object.entries(americanToBritishSpelling).forEach(([american, british]) => {
        const regex = new RegExp(`\\b${this.escapeRegExp(american)}\\b`, 'i');
        if (text.match(regex)) {
          const matchedText = text.match(regex)[0];
          translatedText = translatedText.replace(regex, `<span class="highlight">${british}</span>`);
          translatedPhrases.push({ original: matchedText, translated: british });
        }
      });
      
      // Handle time format (12:15 -> 12.15)
      const timeRegex = /(\d{1,2}):(\d{2})/g;
      let timeMatch;
      while ((timeMatch = timeRegex.exec(text)) !== null) {
        const originalTime = timeMatch[0];
        const britishTime = `${timeMatch[1]}.${timeMatch[2]}`;
        translatedText = translatedText.replace(originalTime, `<span class="highlight">${britishTime}</span>`);
        translatedPhrases.push({ original: originalTime, translated: britishTime });
      }
      
    } else {
      // British to American translation
      
      // Handle titles (Mr -> Mr., Dr -> Dr.)
      // Reverse the key-value pairs from American to British titles
      Object.entries(americanToBritishTitles).forEach(([american, british]) => {
        const titleRegex = new RegExp(`\\b${this.escapeRegExp(british)}\\b`, 'gi');
        let match;
        let positions = [];
        
        // Find all matches and store their positions
        while ((match = titleRegex.exec(text)) !== null) {
          positions.push(match.index);
        }
        
        // Process matches in reverse order to avoid position shifts
        for (let i = positions.length - 1; i >= 0; i--) {
          const index = positions[i];
          const britishTitle = text.substring(index, index + british.length);
          
          // Capitalize properly
          let americanTitle = american;
          if (britishTitle[0] === britishTitle[0].toUpperCase()) {
            americanTitle = american.charAt(0).toUpperCase() + american.slice(1);
          }
          
          // Replace with highlight spans
          translatedText = translatedText.substring(0, index) + 
                          `<span class="highlight">${americanTitle}</span>` + 
                          translatedText.substring(index + british.length);
          
          translatedPhrases.push({ original: britishTitle, translated: americanTitle });
        }
      });
      
      // Handle British-only terms
      Object.entries(britishOnly).forEach(([british, american]) => {
        const regex = new RegExp(`\\b${this.escapeRegExp(british)}\\b`, 'i');
        if (text.match(regex)) {
          const matchedText = text.match(regex)[0];
          translatedText = translatedText.replace(regex, `<span class="highlight">${american}</span>`);
          translatedPhrases.push({ original: matchedText, translated: american });
        }
      });
      
      // Handle British to American spelling (reverse of americanToBritishSpelling)
      Object.entries(americanToBritishSpelling).forEach(([american, british]) => {
        const regex = new RegExp(`\\b${this.escapeRegExp(british)}\\b`, 'i');
        if (text.match(regex)) {
          const matchedText = text.match(regex)[0];
          translatedText = translatedText.replace(regex, `<span class="highlight">${american}</span>`);
          translatedPhrases.push({ original: matchedText, translated: american });
        }
      });
      
      // Handle time format (12.15 -> 12:15)
      const timeRegex = /(\d{1,2})\.(\d{2})/g;
      let timeMatch;
      while ((timeMatch = timeRegex.exec(text)) !== null) {
        const originalTime = timeMatch[0];
        const americanTime = `${timeMatch[1]}:${timeMatch[2]}`;
        translatedText = translatedText.replace(originalTime, `<span class="highlight">${americanTime}</span>`);
        translatedPhrases.push({ original: originalTime, translated: americanTime });
      }
    }
    
    // If no translation was made, return the original text
    if (translatedPhrases.length === 0) {
      return {
        text,
        translation: "Everything looks good to me!"
      };
    }
    
    return {
      text,
      translation: translatedText
    };
  }
  
  // Helper method to escape special characters for RegExp
  escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  }
}

module.exports = Translator;